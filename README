`Pf9' is a distribution of parts of plan9port
(http://www.swtch.com/plan9port/), slightly adapted to get
it compiled for use with the MinGW libraries.  The License
is the same as in plan9port, see LICENSE.


Ported programs from $PLAN9/src/cmd:

	9p 9pserve ascii cal calendar cat cmp comm cp date
	dd deroff dial du echo env factor fmt fsize hget
	join listen1 look ls mc md5sum mkdir mtime mv p pr
	primes pwd read resample rm sed seq sha1sum sleep
	sort srv strings sum tail tar tee test time touch
	tr unicode uniq wc xd yacc


Directories from $PLAN9/src/cmd (only parts):
	acme awk lex diff devdraw draw bzip2 grep gzip
	hoc plumb postscript rc tcs troff eqn tbl pic grap


Libraries:
	libthread: works mostly, daemonizing works not

	libdraw:	works basically, tested with tcolors and
		acme. Events are not implemented, so only
		programs using the thread-based mouse
		interface will run.


Pipes:
	Implemented using Named Pipes.

Unix Sockets
	Implemented using Named Pipes. You can use the same
	addresses as in plan9port, e.g. unix!/tmp/acme.

Internet Sockets
	Implemented using Winsock.


	All programs get UTF-8 encoded streams. A "cat > file" from
	the Windows console will produce UTF-8 characters, regardless
	of which codepage is installed.

One result of the console support is that you can use in e.g. `rc' the history
feature of the console window without extra support in rc.


Because the mkfile system's structure has been derived from Plan9's, you
can compile the libs and sources for Linux and MinGW in a similar way:
On Linux, to compile for the MinGW, run

	cd src
	objtype=mingw
	mk


Copy identical files from Plan9port
---------------------------

A lot of files are used from plan9port without change. They are not distributed
along with pf9. You should have a plan9port distribution installed, and the
PLAN9 variable set.

You can run

	mk pop		- to populate the source directory with identical
					source files from p9p

	mk eq		... to check which files are identical

	mk tkdiff		... to get a list of tkdiff commands you can click at in rc to
				explore the differences between p9p and pf9

	mk rm		... remove identical source files



How to build for mingw
-------------------

1.	Set `PF9' to the main directory of this distribution. Set cputype
	and objtype:
		cputype=lin386
		objtype=mingw

	You might just run `sh misc/enterpf9' alternatively, which should
	start an rc shell with these values already set (it won't affect the
	environment of the calling shell).
	
2.	Set PATH to include the necessary bin directories $cputype/bin and
	$cpusys/bin, i.e. lin386/bin and linux/bin. They should come
	before the PLAN9/bin directory, to avoid conflicts. If you have
	run `misc/enterpf9' in step 1, this has already been done.

3.	You should have run `mk pop' once to copy identical source files from
	your plan9port distribution.

4.		cd src
		mk
		mk install
	
	This should build the all programs, on success you will
	find them in mingw/bin.

5.	To get a distribution for windows, e.g. the compiled binaries
	and additional files like troff fonts from plan9port, look into
	dist/mingw.

	This needs some further explanations ...



Run it
-----

	FIXME
	
	This should be enough to get it work. Now you might generate the
	lookman index from a shell prompt, which is a good test of some
	of the functionality:

		$ rc
		% cd $PF9/sys/man
		% ./mkindex

